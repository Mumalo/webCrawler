Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

    In the two config files, we have a fixed timeoutSeconds of 2 seconds. This means that the crawler will stop
    after 2 seconds. This also means that both the crawl method of the sequential and parallel crawlers can take
    at most 2 seconds. Thus, these two crawlers take about the same time.

    However, does that mean they do the same work within the 2 seconds? Since the parallel crawler uses a fork-join
    pool to share tasks among workers and also take advantage of the multiple cores of the computer (mine has 8 cores)
    it is only natural that more work is done by the parallel crawler this this interval (2 seconds).

    Since more work is done, there is more data to process; there are more urls to parse and more to categorize.
    This explains why the parse method takes more time with the parallel crawler. In my specific case, I got the following
    results:

    1. For sequential crawler with timeout of 2 seconds
       a. Time taken data:
          Run at Fri, 1 Jan 2021 00:31:42 GMT
          com.sun.proxy.$Proxy27#crawl took 0m 2s 553ms
          com.udacity.webcrawler.SequentialWebCrawler#crawl took 0m 2s 553ms
          com.udacity.webcrawler.parser.PageParserImpl#parse took 0m 2s 539ms

       b. Data returned
          {"wordCounts":{"learning":73,"data":60,"machine":47,"with":47,"program":45},"urlsVisited":2}

    2. For parallel crawler
       a. Time taken data:
          Run at Fri, 1 Jan 2021 00:34:02 GMT
          com.sun.proxy.$Proxy27#crawl took 0m 3s 394ms
          com.udacity.webcrawler.ParallelWebCrawler#crawl took 0m 3s 394ms
          com.udacity.webcrawler.parser.PageParserImpl#parse took 0m 9s 999ms

       b. Data returned
          {"wordCounts":{"data":201,"learning":171,"program":167,"with":163,"engineer":140},"urlsVisited":9}



Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

        The parallel crawler uses a fork-join pool that is optimized on computers with multiple processors. This means
        that tasks (work) in the pool is shared across processors and to do the work faster. Since the aforementioned laptop
        is old, it will probably have a single processor. This means that the benefits of using parallelism will not be
        harnessed. In addition, parallelism, like multithreading, comes with a cost. The cost of creating, using and shutting
        down the pool cannot be underestimated. In addition, synchronization is costly. So if the code or the environment does
        not warrant parallelism or multithreading, the entire operation can be more costly.

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

        If we use a computer that has multiple cores, like mine (see statistics above), then the benefits of parallelism will
        be fully harnessed. Since the pool works by splitting work across processors, it means more work will be done within
        a particular interval if there are multiple processors. Again, the work stealing algorithm implemented by the pool
        ensures that workers are always busy. With this, system resources dont stay idle and go to waste and thus more work is done.


Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

    We are logging the duration taking by certain methods to run. This is a cross-cutting concern because the same functionality
    if needed in many parts of the program, i.e. all methods that have the Profiled annotation. We achieved this by creating a dynamic
    proxy and thus routing all the method calls on the delegated objects through the proxy that then performs the additional effect, in
    this case logging the duration taken by methods to run.

    (b) What are the join points of the Profiler in the web crawler program?
    Joint points are the methods that are annotated with the @Profiled annotation


Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.
    1. Dependency Injection: We used google's Guice library to inject dependencies in most parts of our application
       an example of a class that used dependency injection is the WebCrawlerMain that injects Webcrawler and Profiler classes.
       Since we do not have to manually construct dependencies, our code becomes fairly simpler and easy to manage. Again, the
       complexities of manually constructing every dependency down the tree is lifted.


    2. Builder Pattern: In cases where we are faced with many constructor parameters, we used the builder pattern to
       provide more readable and cleaner APIs. For instance, CrawlerConfiguration uses the builder patten to load properties from
       the given configuration file into the object using jackson.
       Although this pattern shines when constructing complex objects, it will be useless to use it to construct fairly simple
       objects like objects with few attributes.

    3. Singleton Pattern: When injecting some of our dependencies with Guice, we specified that we need only single instances with the
       @Singleton annotation. This makes sure that only one instance of the injected classes are loaded into the application and recycled
       when needed. Although singletons can be good when object creation is heavy, they do not fare well in multithreaded environments especially
       when there is mutually shared data to be mutated. Singletons make unit testing very difficult by introducing a global state therefore,
       making it difficult to mock objects.
       However, as mentioned above, Singletons really shine when object creation is heavy and we want to only do so once in out app.


    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.


